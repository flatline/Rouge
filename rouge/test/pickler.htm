<html>
    <head>
        <style type="text/css">
            div {
                border: solid red 1px;
                margin: 5px;
            }
        </style>
        <script type="text/javascript" src="../scripts/jquery-1.3.2.min.js" ></script>
        <script type="text/javascript" src="../scripts/jquery-json.min.js" ></script>
        <script type="text/javascript" src="../scripts/main.js"></script>
        <script type="text/javascript" src="../scripts/actors.js"></script>
        <script type="text/javascript" src="../scripts/player.js"></script>
        <script type="text/javascript" src="../scripts/npc.js"></script>
        <script type="text/javascript" src="../scripts/pickler.js" ></script>        
        <script type="text/javascript">
        
            function pickleNumber() {
                var p = new Pickler();
                // [{"id":1,"objectType":"number","objectData":5}]
                return p.pickle(5);
            }
            
            function unpickleNumber() {
                var p = new Pickler();
                var x = pickleNumber();
                // 5
                return p.unpickle(x);
            }
            
            function pickleSimpleRef() {
                var a = { "property": "a" };
                a.referenced = { "property" : "b" };
                var p = new Pickler();
                // [{"id":1,"objectType":"object","objectData":{"property":"a","referenced":{"typeName":"PRef","targetId":2}}},{"id":2,"objectType":"object","objectData":{"property":"b"}}]
                return p.pickle(a);
            }
            
            function unpickleSimpleRef() {
                var x = pickleSimpleRef();
                var p = new Pickler();
                // {"property":"a","referenced":{"property":"b"}}
                return $.toJSON(p.unpickle(x));
            }
            
            function pickleCircularRef() {
                var a = { value : "a"};
                var b = { value : "b"};
                a.target = b;
                b.target = a;
                
                var p = new Pickler();
                // [{"id":1,"objectType":"object","objectData":{"value":"a","target":{"typeName":"PRef","targetId":2}}},{"id":2,"objectType":"object","objectData":{"value":"b","target":{"typeName":"PRef","targetId":1}}}]
                return p.pickle(a);
            }
            
            function unpickleCircularRef() {
                var x = pickleCircularRef();
                var p = new Pickler();
                var a = p.unpickle(x);
                // can't just do toJSON any more b/c of circular references
                var result = "value of a = " + a.value;
                var b = a.target;
                result += "; value of b = " + b.value;
                result += "; value of a via b.target.value = " + b.target.value;
                // value of a = a; value of b = b; value of a via b.target.value = a
                return result;
            }
            
            function pickleNullValues() {
                var a = { "value" : "a", "nullary" : null, "undef" : undefined };
                var p = new Pickler();
                return p.pickle(a);
            }
            
            function unpickleNullValues() {
                var x = pickleNullValues();
                return $.toJSON( (new Pickler()).unpickle(x) );
            }
            
            var CustomType = function() {
                var self = this;
                self.typeName = "CustomType";
                
                self.value = 77;
                
                this.getValue = function() {
                    return self.value;
                };
            };
            
            function pickleCustomType() {                
                var x = new CustomType();
                // [{"id":1,"objectType":"CustomType","objectData":{"typeName":"CustomType","value":77}}]
                return (new Pickler()).pickle(x);
            }
            
            function unpickleCustomType() {
                var x = pickleCustomType();
                var p = new Pickler();
                var ct = p.unpickle(x);
                // 77
                return ct.getValue();
            }
            
            function pickleArray() {
                // [{"id":1,"objectType":"array","objectData":{"0":"a","1":5,"2":{"typeName":"PRef","targetId":2},"3":7}},{"id":2,"objectType":"CustomType","objectData":{"typeName":"CustomType","value":77}}]
                return (new Pickler()).pickle(
                    ['a', 5, new CustomType(), 7]
                );
            }
            
            function unpickleArray() {
                // ["a",5,{"typeName":"CustomType","value":77},7]
                return $.toJSON( (new Pickler()).unpickle(pickleArray()) );
            }
            
            function pickleSimpleMap() {
                var map = new Map();
                map.init(2, 2);
                tileMap(map);
                
                //long...
                return (new Pickler()).pickle(map);
            }
            
            function unpickleSimpleMap() {
                var x = pickleSimpleMap();
                var map = (new Pickler()).unpickle(x);
                var result = "Map - is of type " + map.typeName;
                result += ".  Is " + map.height + " high and " + map.width + " wide.";
                var tile = map.peek(0,0,0);
                delete(tile.loc); //to avoid circular ref for json
                result += " Object at 0,0 is " + $.toJSON(tile);
                return result;
            }
            
            function pickleFullMap() {
                var map = new Map();
                map.init(2,2);                                    
                tileMap(map);
                
                //var scheduler = new Scheduler(map);
                
                player = new Player();
                map.player = player;
                map.poke(player, 1, 1);
                
                for (var i = 0; i < 2; i++) {
                	   var orc = new NPC();
                   	orc.repr = "orc1";
                   	orc.id = world.getID();
                   	map.poke(orc, 0, i);
                }
                
                return (new Pickler()).pickle(map);
            }
            
            function unpickleFullMap() {
                var x = pickleFullMap();
                var map = (new Pickler()).unpickle(x);
                var result = map.player.typeName + " at " +
                    map.player.loc.row + ", " + map.player.loc.col + ".  ";
                for (var i = 0; i < 2; i++) {
                    var orc = map.peek(0,i,1);
                    result += " " + orc.typeName + " ";
                }
                var tile = map.peek(0,0,0);
                delete(tile.loc); //to avoid circular ref for json
                result += " Object at 0,0 is " + $.toJSON(tile);
                return result;
            }

            $("document").ready(function() {
                var dbg = $("#dbg");
                $("#btnTest").click(function() {
                    dbg.append("<div>pickleNumber:<br />" + pickleNumber() + "<br/></div>");
                    dbg.append("<div>unPickleNumber:<br/>" + unpickleNumber() + "<br/></div>");                    
                    dbg.append("<div>pickleSimpleRef:<br/>" + pickleSimpleRef() + "<br/></div>");
                    dbg.append("<div>unpickleSimpleRef:<br/>" + unpickleSimpleRef() + "<br/></div>");
                    dbg.append("<div>pickleCircularRef:<br/>" + pickleCircularRef() + "<br/></div>");
                    dbg.append("<div>unpickleCircularRef:<br/>" + unpickleCircularRef() + "<br/></div>");
                    dbg.append("<div>pickleNullValues:<br/>" + pickleNullValues() + "<br/></div>");
                    dbg.append("<div>unpickleNullValues:<br/>" + unpickleNullValues() + "<br/></div>");
                    dbg.append("<div>pickleCutomType:<br/>" + pickleCustomType() + "<br/></div>");
                    dbg.append("<div>unpickleCustomType:<br/>" + unpickleCustomType() + "<br/></div>");
                    dbg.append("<div>pickleArray:<br/>" + pickleArray() + "<br/></div>");
                    dbg.append("<div>unpickleArray:<br/>" + unpickleArray() + "<br/></div>");
                    dbg.append("<div>pickleSimpleMap:<br/>" + pickleSimpleMap() + "<br/></div>");
                    dbg.append("<div>unpickleSimpleMap:<br/>" + unpickleSimpleMap() + "<br/></div>");
                    dbg.append("<div>pickleFullMap:<br/>" + pickleFullMap() + "<br/></div>");
                    dbg.append("<div>unpickleFullMap:<br/>" + unpickleFullMap() + "<br/></div>");
                });
            });
        </script>
    </head>
    <body>
        <div id="dbg"></div>
        <input id="btnTest" type="button" value="Test" />
    </body>
</html>
